package com.mccorby.wordcounter.domain.entities;

/**
 * The main entity in our system.
 *
 * Created by JAC on 09/06/2015.
 */
public class WordOccurrence {

    private String mWord;
    private int mOccurrences;

    public WordOccurrence(String word) {
        this.mWord = word;
        this.mOccurrences = 1;
    }

    public String getWord() {
        return mWord;
    }

    public int getOccurrences() {
        return mOccurrences;
    }

    public void incrementOccurrence() {
        mOccurrences++;
    }

    @Override
    /**
     * Modified the autogenerated by AndroidStudio equals
     */
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        WordOccurrence that = (WordOccurrence) o;
        return this.mWord.compareToIgnoreCase(that.mWord) == 0;
    }

    @Override
    public int hashCode() {
        // I am multiplying by a prime number to obtain a better distribution of objects in the maps.
        // Note that the hash code could be more complex (there are PhDs about it!)
        // The lower case is needed to obtain the same hash code no matter the case of the original word.
        return mWord.toLowerCase().hashCode() * 31;
    }


    @Override
    public String toString() {
        return "WordOccurrence{" +
                "mWord='" + mWord + '\'' +
                ", mOccurrences=" + mOccurrences +
                '}';
    }
}
